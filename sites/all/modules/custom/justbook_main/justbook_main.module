<?php

/**
 * Implements hook_menu().
 */
function justbook_main_menu() {
  $items['info'] = array(
    'title' => '',
    'page callback' => 'redirect_user',
    'access callback' => TRUE,
  );
  $items['search-event'] = array(
    'title' => '',
    'page callback' => 'search_event',
    'access callback' => TRUE,
  );
  return $items;
}

function redirect_user() {
  return '';
}
/**
 * Implements hook_block_info().
 */
function justbook_main_block_info() {
  $blocks = array();
  $blocks['organiser_profile'] = array(
    'info' => t('Organiser profile'),
  );
  return $blocks;
}

function search_event() {
  return '<div>'. drupal_render(drupal_get_form('geoaddress_test_form')) .'</div>';
}

/**
 * Implements hook_block_view().
 */
function justbook_main_block_view($delta = '') {
   $block = array();
   switch ($delta) {
    case 'organiser_profile':
      $block['subject'] = t('Business/Organiser details');
      $block['content'] = justbook_main_block_items();
      break;
  }
  return $block;
}

function justbook_main_block_items() {
  $items = array();
  $node = menu_get_object();
  $user = user_load_by_name($node->name);
  $items['organiser_lable'] = array(
    '#markup' => '<b>Business/Organiser Name:</b>'
  );
  $items['user_id'] = $user->uid;
  $items['user-name_label'] = array('#markup' => '<b>User page:</b>');
  $items['user_name'] = array(
    '#prefix' => '<div>',
    '#markup' => $user->name,
    '#suffix' => '</div>',
  );
  if (!empty($user->field_business_organiser_name[LANGUAGE_NONE][0]['value'])) {
    $items['organiser_name'] = array(
      '#prefix' => '<div>',
      '#markup' => $user->field_business_organiser_name[LANGUAGE_NONE][0]['value'],
      '#suffix' => '</div>',
    );
  }
  $items['fb'] = $user->field_facebook_profile_link[LANGUAGE_NONE][0]['url'];
  $items['facebook_lable'] = array('#markup' => '<b>Facebook profile:</b>');
  $items['facebook_link'] = $user->field_facebook_profile_link[LANGUAGE_NONE][0]['url'];
  $items['tw'] = $user->field_twitter_profile[LANGUAGE_NONE][0]['url'];
  $items['twitter_lable'] = array('#markup' => '<b>Twitter profile:</b>');
  $items['twitter_link'] = $user->field_twitter_profile[LANGUAGE_NONE][0]['url'];

  return theme('justbook_main_block_items', array('items' => $items));
}

function justbook_main_theme() {
  $module_path = drupal_get_path('module', 'justbook_main');
  $base = array(
    'path' => "$module_path/theme",
  );
  return array(
    'justbook_main_block_items' => $base + array(
      'template' => 'organiser_profile',
      'variables' => array(
        'items' => NULL,
      ),
    ),
    'just_image_upd' => array(
      'render element' => 'element',
    ),
  );
}

function justbook_main_preprocess_page(&$vars) {
  $node = menu_get_object();
  if ($node) {
    $user = user_load_by_name($node->name);
    if ($node->type === 'business') {
      if ($user->name === 'admin' || empty($user->name)) {
        unset($vars['page']['sidebar_second']['justbook_main_organiser_profile']);
      }
    }
  }
}

function justbook_main_form_alter(&$form, &$form_state, $form_id) {
  $a = 3;
  if ($form_id == 'user_profile_form') {
    $form['picture']['picture_upload'] = array(
      '#type' => 'managed_file',
      '#title' => t('Upload image'),
      '#upload_location' => "public://picture/",
      '#theme' => 'just_image_upd', //Function name to hook
    );
    if(isset($form['picture']['picture']['#value']->fid)){
      $form['picture']['picture_upload']['#title'] = 'Profile Picture';
      $form['picture']['picture_upload']['#default_value'] = $form['picture']['picture']['#value']->fid;
    }
  }
  elseif ($form_id == 'user_register_form') {
    $form["actions"]["submit"]['#attributes']['onclick'] = "ga('send', 'event', { eventCategory: 'Contact', eventAction: 'Click', eventLabel: 'Lead'});";
    $form['agree'] = array(
      '#type' =>
        'checkbox',
      '#title' => t('I agree to the <a href="/privacy-policy" target="_blank">privacy policy</a> and community guidelines.'),
      '#weight' => 99,
    );
  }
  elseif ($form_id == 'contact_site_form') {
    $form["actions"]["submit"]['#attributes']['onclick'] = "ga('send', 'event', { eventCategory: 'Contact', eventAction: 'Click', eventLabel: 'Lead'})";
  }
  elseif ($form_id == 'views_exposed_form') {
    $form['field_open_time_value']['value']['#type'] = 'hidden';
    $form['field_open_time_value2']['value']['#type'] = 'hidden';
    $form['between_date_filter'] = array(
      '#type' => 'select',
      '#options' => array(
        0 => t('today'),
        1 => t('tomorrow'),
        2 => t('this weekend'),
        3 => t('next week'),
        4 => t('this month'),
        5 => t('next month'),
        6 => t('select dates'),
      ),
      '#default_value' => 0,
    );
    $form['select_date_event'] = array(
      '#type' => 'date_popup',
      '#date_format' => "m/d/Y",
      '#states' => array(
        'visible' => array(
          'select[name="between_date_filter"]' => array('value' => 6),
        ),
      ),
    );
    $form["#submit"][] = 'select_date_submit';
    sort($form['#submit']);
  }
}

function select_date_submit($form, &$form_state) {
  if ($form_state["values"]["between_date_filter"]["value"] == 0) {
    $form_state['values']['field_open_time_value']['value'] = date('Y-m-d', strtotime('now'));
    $form_state['values']['field_open_time_value2']['value'] = date('Y-m-d', strtotime('now'));
  }
  elseif ($form_state["values"]["between_date_filter"]["value"] == 1) {
    $form_state['values']['field_open_time_value']['value'] = date('Y-m-d', strtotime('now +1 day'));
    $form_state['values']['field_open_time_value2']['value'] = date('Y-m-d', strtotime('now +1 day'));
  }
  elseif ($form_state["values"]["between_date_filter"]["value"] == 2) {
    $form_state['values']['field_open_time_value']['value'] = date('Y-m-d', strtotime('next saturday'));
    $form_state['values']['field_open_time_value2']['value'] = date('Y-m-d', strtotime('next sunday'));
  }
  elseif ($form_state["values"]["between_date_filter"]["value"] == 3) {
    $form_state['values']['field_open_time_value']['value'] = date('Y-m-d', strtotime('monday this week'));
    $form_state['values']['field_open_time_value2']['value'] = date('Y-m-d', strtotime('sunday this week'));
  }
  elseif ($form_state["values"]["between_date_filter"]["value"] == 4) {
    $form_state['values']['field_open_time_value']['value'] = date('Y-m-d', strtotime('first day of this month'));
    $form_state['values']['field_open_time_value2']['value'] = date('Y-m-d', strtotime('last day of this month'));
  }
  elseif ($form_state["values"]["between_date_filter"]["value"] == 5) {
    $form_state['values']['field_open_time_value']['value'] = date('Y-m-d', strtotime('first day of next month'));
    $form_state['values']['field_open_time_value2']['value'] = date('Y-m-d', strtotime('last day of next month'));
  }
  elseif ($form_state["values"]["between_date_filter"]["value"] == 6) {
    $form_state['values']['field_open_time_value']['value'] = date('Y-m-d', strtotime($form_state['values']['select_date_event']));
    $form_state['values']['field_open_time_value2']['value'] = date('Y-m-d', strtotime($form_state['values']['select_date_event']));
  }
}
/**
 * Theme upload image show priview
 **/

function theme_just_image_upd($variables) {
  $element = $variables['element'];
  $output = '';
  if ($element['fid']['#value'] != 0) {
    // if image is uploaded show its thumbnail to the output HTML
    $output .= '<div class="image-preview">';
    $output .= drupal_render_children($element);
    $output .= '</div>';
  }
  return $output;
}

/**
 * This function will call on edit mode on edit profile after submit for file save
 * @param type $edit
 * @param type $account
 * @param type $category
 */
function user_profile_enhancements_user_update($edit, $account, $category)
{
  if( ((int) $account->picture==0) && ($account->picture_upload !=0) )
  {
    unset($edit['pass']);#password encrypted 2 time so remove it
    $file = file_load($account->picture_upload);
    $file->source = 'picture_upload';
    $file->destination = $file->uri;
    unset($file->rdf_mapping);
    $edit['picture'] = $account->picture_upload;

    file_save($file);
    file_usage_add($file, 'user', 'user', $account->uid);

    $edit['picture_upload'] = $file;
    user_save($account, $edit);
  }
  else
  {
    if (!empty($account->original->picture->fid)) {
      file_usage_delete($account->original->picture, 'user', 'user', $account->uid);
      file_delete($account->original->picture);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function justbook_main_node_insert($node) {
  if ($node->field_open_time[LANGUAGE_NONE][0]['value2']) {
    $node->unpublish_on = strtotime($node->field_open_time[LANGUAGE_NONE][0]['value2']);
  }
}

function justbook_main_views_pre_render(&$view) {
  if ($view->name === 'business_detail_header') {
    $a = menu_get_object('node');
    drupal_add_js(array('justBook' => array(
      'address' => $a->field_address['und'][0]['value'],
    )), 'setting');
    drupal_add_js('sites/all/modules/custom/justbook_main/js/stay22.js');
  }

}

function organizer_page($user_id) {
  $user = user_load($user_id);
  return '<h1>' . $user->field_business_organiser_name['und'][0]['value'] . '</h1>';
}

function geoaddress_test_form($form, &$form_state) {
  $a = 3;
  $form['test'] = array(
    '#type' => 'container',
  );
  $form['test']['geom'] = array(
    '#type' => 'geofield_latlon',
    '#title' => check_plain($instance['label']),
    '#description' => field_filter_xss($instance['description']),
    '#default_value' => $latlon_value,
    '#required' => $instance['required'],
    '#geolocation' => (!empty($settings['html5_geolocation'])) ? $settings['html5_geolocation'] : FALSE,
    '#geofield_gmap_geolocation_override' => (!empty($settings['html5_geolocation'])) ? $settings['html5_geolocation'] : FALSE,
    '#zoom_level' => (!empty($settings['zoom_level'])) ? $settings['zoom_level'] : 1,
  );
  $form['test']['input_format'] = array(
    '#type' => 'value',
    '#attributes' => array('class' => array('geofield_input_format')),
    '#value' => GEOFIELD_INPUT_LAT_LON,
  );

  $form['test']['master_column']['#value'] = 'latlon';

  $form['test']['#gmap_id'] = geofield_gmap_get_id($form['test']);
  $form['test']['#gmap_map_type'] = $settings['map_type'];
  $form['test']['#gmap_confirm_center_marker'] = $settings['confirm_center_marker'];
  $form['test']['#gmap_click_to_place_marker'] = $settings['click_to_place_marker'];
  $form['test']['#after_build'] = array('geofield_gmap_widget_gmap_afterbuild');
  $api_key = variable_get('geofield_gmap_google_api_key');
  $api_key_query_param = !empty($api_key) ? '?key=' . $api_key : '';

  // Attach GMAP API and autocomplete library.
  $form['test']['#attached']['library'][] = array('system', 'ui.autocomplete');
  $form['test']['#attached']['js'][] = array(
    'data' => '//maps.googleapis.com/maps/api/js' . $api_key_query_param,
    'type' => 'external',
    'preprocess' => FALSE,
  );

  $id = $form['test']['#gmap_id'];
  $gmapid = 'gmap-' . $id;
  $form['test']['geom']['lat']['#prefix'] = '<div class="form-item">';
  $form['test']['geom']['lat']['#prefix'] .= '<label>' . t("Geocode address") . '</label><input size="64" id="search-' . $id . '" class="form-text form-autocomplete geofield-gmap-search" type="text"/>';
  $form['test']['geom']['lat']['#prefix'] .= '<div id="' . $gmapid . '" class="geofield-gmap-cnt"></div>';
  $form['test']['geom']['lat']['#prefix'] .= '<div class="geofield-gmap-buttons">';
  $form['test']['geom']['lat']['#prefix'] .= '<label>' . t("Drag the marker to narrow the location") . '</label>';
  $form['test']['geom']['lat']['#prefix'] .= '<button class="geofield-gmap-center" onclick="geofield_gmap_center(\'' . $gmapid . '\'); return false;">' . t('Find marker') . '</button>';
  $form['test']['geom']['lat']['#prefix'] .= '<button class="geofield-gmap-marker" onclick="geofield_gmap_marker(\'' . $gmapid . '\'); return false;">' . t('Place marker here') . '</button>';
  $form['test']['geom']['lat']['#prefix'] .= '</div>';
  $form['test']['geom']['lat']['#prefix'] .= '</div>';

  // Attach JS settings.
  $form['test']['#attached']['js'][] = array(
    'data' => array('geofield_gmap' => array(
      $gmapid => array(
        'lat' => floatval($form['test']['geom']['lat']['#default_value']),
        'lng' => floatval($form['test']['geom']['lon']['#default_value']),
        'zoom' => intval($form['test']['geom']['#zoom_level']),
        'latid' => $form['test']['geom']['lat']['#id'],
        'lngid' => $form['test']['geom']['lon']['#id'],
        'searchid' => 'search-' . $id,
        'mapid' => $gmapid,
        'widget' => TRUE,
        'map_type' => $form['test']['#gmap_map_type'],
        'confirm_center_marker' => (bool) $form['test']['#gmap_confirm_center_marker'],
        'click_to_place_marker' => (bool) $form['test']['#gmap_click_to_place_marker'],
      ),
    )),
    'type' => 'setting',
  );

  if (isset($form['test']['geom']['#geofield_gmap_geolocation_override']) && $form['test']['geom']['#geofield_gmap_geolocation_override']) {
    // Add override behavior.
    $form['test']['#attached']['js'][] = drupal_get_path('module', 'geofield_gmap') . '/geofield_gmap_geolocation_override.js';
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'submit'
  );
  if (isset($form_state['test'])) {
    $output = '<div class="view-search-event">';
    foreach ($form_state["test"]["test"] as $node_res) {
      $node = node_load($node_res->entity_id);
      $output .= '
        <div class="col-xs-12 col-sm-6 col-md-3"><div class="views-row-inner"><div class="views-field-field-image">
          <a href="/node/' . $node->nid . '">
            <img src="'. file_create_url($node->field_image["und"][0]["uri"]) .'">
          </a>
        </div>
        <div class="views-field-title views-row">
        <a href="/node/' . $node->nid . '">' . $node->title . '</a></div>
        <div class="views-field-field-address views-row"><div class="field-content"><i class="fa fa-home"></i>'.  $node->field_address["und"][0]["value"]  .'</div></div>'
         .
        '</div></div>';
    }
    $output .= '</div>';
    $form['result'] = array(
      '#markup' => '<div>'. $output .'</div>',
    );
  }
  return $form;
}

function geoaddress_test_form_submit($form, &$form_state) {
  $a = 3;
  $b = $a;
  $lat = $form_state["values"]["geom"]["lat"];
  $lon = $form_state["values"]["geom"]["lon"];
  $radius = 100; // Km
  //
  $angle_radius = $radius / 111; // Every lat|lon degree° is ~ 111Km
  $min_lat = $lat - $angle_radius;
  $max_lat = $lat + $angle_radius;
  $min_lon = $lon - $angle_radius;
  $max_lon = $lon + $angle_radius;

  $result = db_query("SELECT * FROM field_data_field_coordinates WHERE field_coordinates_lat BETWEEN $min_lat AND $max_lat AND field_coordinates_lon BETWEEN $min_lon AND $max_lon");
  $n_rows =  $result->fetchAll();

  $form_state["rebuild"] = true;
  $form_state["test"]['test'] = $n_rows;
}

function justbook_main_views_query_alter($view, $filters) {
  if ($view->current_display == 'page_1') {
    if ($view->vid == 4) {
      if ($view->exposed_data['between_date_filter'] == 0 || $view->exposed_data['between_date_filter'] == 1) {
        $filters->where[2]['conditions'][0]['field'] = "DATE_FORMAT(ADDTIME(field_data_field_open_time.field_open_time_value, SEC_TO_TIME(3600)), '%Y-%m-%d') <= :field_data_field_open_time_field_open_time_value";
        $filters->where[2]['conditions'][1]['field'] = "DATE_FORMAT(ADDTIME(field_data_field_open_time.field_open_time_value2, SEC_TO_TIME(3600)), '%Y-%m-%d') >= :field_data_field_open_time_field_open_time_value2";
      }
    }
  }
}

function justbook_main_views_post_execute(&$view) {
  if ($view->current_display == 'block_10' && $view->vid == 2) {
    $a = 3;
    $b = $a;
  }
}
function justbook_main_preprocess_views_view_masonry(&$variables) {
  $view = $variables['view'];
  if ($view->current_display == 'block_10' && $view->vid == 2) {
    $variables['classes_array'][0] .= ' previews';
    $c = array();
    $a = $view->result;
    foreach ($a as $key => $b) {
      $c[$key]['date'] = $b->field_field_open_time[0]['raw']['value'];
      $c[$key]['title'] = $b->nid;
    }
    usort($c, "sortFunction");
    $j = 0;
    for($i =0; $i<10; $i++) {
      for($z=0; $z<4; $z++) {
        if ($variables['view']->result[$i]->nid == $c[$z]['title']) {
          $variables['classes_array'][$i] .= ' point';
          $j++;
        }
      }
      if ($j == 4) {
        break;
      }
    }
  }
}
function sortFunction( $a, $b ) {
    return strtotime($a["date"]) - strtotime($b["date"]);
}
